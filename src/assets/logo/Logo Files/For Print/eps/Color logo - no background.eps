%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2154 2419
%%HiResBoundingBox: 0 0 2154 2418.96
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2154 2418.96 re
W
q
[0.24 0 0 -0.24 0 2418.96] cm
q
0 0 8975 10078.125 re
W*
q
[166.720718 0 0 166.712067 352.82678 353.51605] cm
/DeviceRGB {} CS
[0.0667 0.0667 0.0667] SC
/DeviceRGB {} cs
[0.0667 0.0667 0.0667] sc
23.110001 55.779999 m
1.69 43.41 l
1.626148 43.37299 1.563571 43.333935 1.502269 43.292839 c
1.440967 43.251743 1.381071 43.208687 1.322581 43.163677 c
1.264092 43.118668 1.207132 43.0718 1.151704 43.023075 c
1.096275 42.974342 1.042495 42.923855 0.990364 42.871613 c
0.938233 42.81937 0.887861 42.765484 0.839249 42.709949 c
0.790637 42.654419 0.743889 42.597363 0.699004 42.538776 c
0.654119 42.480194 0.611192 42.420208 0.570225 42.358818 c
0.529258 42.297428 0.490337 42.234768 0.453462 42.170834 c
0.416587 42.106903 0.381837 42.041836 0.349212 41.975639 c
0.316587 41.909439 0.286156 41.842247 0.25792 41.774059 c
0.229683 41.705872 0.203701 41.636833 0.179973 41.566948 c
0.156246 41.497066 0.134823 41.426479 0.115706 41.355194 c
0.096588 41.283909 0.079816 41.212078 0.06539 41.139698 c
0.050964 41.067322 0.038915 40.994549 0.029242 40.921379 c
0.019569 40.848209 0.012293 40.774807 0.007414 40.701164 c
0.002535 40.627525 0.000064 40.553802 0 40.48 c
0 15.75 l
-0.000154 15.675988 0.002113 15.602052 0.006801 15.528189 c
0.01149 15.454325 0.01859 15.380693 0.028101 15.307296 c
0.037612 15.233898 0.049514 15.160891 0.063806 15.088271 c
0.078099 15.015654 0.094753 14.943581 0.113766 14.872052 c
0.132779 14.800524 0.154113 14.729694 0.177765 14.659564 c
0.201418 14.589434 0.227339 14.520152 0.255529 14.451719 c
0.28372 14.383287 0.314119 14.315848 0.346726 14.249407 c
0.379333 14.182965 0.414079 14.117661 0.450964 14.053495 c
0.487848 13.989329 0.526792 13.926439 0.567796 13.864823 c
0.6088 13.803207 0.651775 13.743 0.696722 13.684199 c
0.741669 13.625399 0.788492 13.568132 0.83719 13.5124 c
0.885888 13.456666 0.936357 13.402585 0.988597 13.350157 c
1.040837 13.297728 1.094736 13.247065 1.150295 13.198167 c
1.205853 13.149269 1.262951 13.102241 1.32159 13.057083 c
1.380229 13.011925 1.440282 12.968733 1.501749 12.927508 c
1.563217 12.886284 1.625967 12.847115 1.69 12.81 c
23.110001 0.45 l
23.174074 0.413008 23.239288 0.37815 23.305643 0.345428 c
23.371998 0.312705 23.439352 0.282187 23.507704 0.253875 c
23.576057 0.225562 23.645262 0.199515 23.715321 0.175733 c
23.785379 0.151952 23.85614 0.130486 23.927603 0.111338 c
23.999065 0.092189 24.071079 0.075398 24.143641 0.060964 c
24.216206 0.046531 24.289164 0.034485 24.362514 0.024828 c
24.435865 0.015171 24.509455 0.007924 24.583281 0.003085 c
24.657106 -0.001754 24.731012 -0.004174 24.804998 -0.004174 c
24.878983 -0.004174 24.952888 -0.001754 25.026716 0.003085 c
25.100542 0.007924 25.174131 0.015171 25.247482 0.024828 c
25.320833 0.034485 25.393791 0.046531 25.466356 0.060964 c
25.538919 0.075398 25.610931 0.092189 25.682394 0.111338 c
25.753859 0.130486 25.824619 0.151952 25.894678 0.175733 c
25.964737 0.199515 26.033943 0.225562 26.102297 0.253875 c
26.17065 0.282187 26.238005 0.312705 26.304359 0.345428 c
26.370714 0.37815 26.435928 0.413008 26.5 0.45 c
47.91 12.82 l
47.974037 12.857115 48.036785 12.896285 48.098251 12.93751 c
48.159718 12.978734 48.219765 13.021926 48.2784 13.067083 c
48.337044 13.112242 48.394142 13.159269 48.449703 13.208167 c
48.50526 13.257065 48.559158 13.307728 48.611397 13.360156 c
48.663639 13.412584 48.714108 13.466664 48.762802 13.522398 c
48.811504 13.578132 48.858326 13.635398 48.903275 13.694199 c
48.948223 13.752999 48.991199 13.813208 49.032204 13.874824 c
49.073208 13.93644 49.112148 13.99933 49.149033 14.063496 c
49.185917 14.127662 49.220665 14.192966 49.253273 14.259407 c
49.285881 14.325849 49.31628 14.393286 49.344467 14.461719 c
49.372658 14.530151 49.398579 14.599433 49.422234 14.669563 c
49.445885 14.739694 49.467216 14.810523 49.486229 14.882052 c
49.505241 14.953579 49.521896 15.025652 49.53619 15.098271 c
49.550484 15.17089 49.562386 15.243898 49.571896 15.317296 c
49.581409 15.390694 49.588509 15.464325 49.593193 15.538189 c
49.597881 15.612052 49.600151 15.685988 49.599998 15.76 c
49.599998 40.48 l
49.600151 40.554012 49.597885 40.627949 49.593197 40.701809 c
49.588512 40.775673 49.581413 40.8493 49.571899 40.922699 c
49.562389 40.996098 49.550488 41.069107 49.536194 41.141727 c
49.521904 41.214344 49.505253 41.286415 49.48624 41.357944 c
49.467224 41.429474 49.445892 41.500305 49.422241 41.570431 c
49.39859 41.640564 49.372669 41.709843 49.344475 41.778275 c
49.316288 41.846706 49.285889 41.914146 49.253284 41.980587 c
49.220673 42.047031 49.185925 42.112335 49.14904 42.176502 c
49.112156 42.240669 49.073215 42.303558 49.032215 42.36517 c
48.991211 42.426788 48.948231 42.486996 48.903282 42.545795 c
48.858334 42.604599 48.811512 42.661865 48.762814 42.717602 c
48.714119 42.773338 48.663651 42.827419 48.611408 42.879845 c
48.55917 42.93227 48.505272 42.982933 48.449711 43.03183 c
48.39415 43.080727 48.337051 43.127754 48.278408 43.172913 c
48.219772 43.218071 48.159721 43.261265 48.098255 43.30249 c
48.036789 43.343716 47.974037 43.382885 47.91 43.419998 c
26.5 55.779999 l
26.435928 55.81699 26.370714 55.851845 26.304359 55.884567 c
26.238005 55.91729 26.17065 55.947807 26.102297 55.97612 c
26.033945 56.004433 25.964739 56.030479 25.89468 56.054264 c
25.824621 56.078045 25.75386 56.09951 25.682396 56.118656 c
25.610933 56.137806 25.538919 56.154598 25.466356 56.169033 c
25.393791 56.183464 25.320835 56.195511 25.247484 56.205166 c
25.174133 56.214825 25.100544 56.222073 25.026716 56.22691 c
24.95289 56.23175 24.878984 56.234169 24.805 56.234169 c
24.731016 56.234169 24.65711 56.23175 24.583284 56.22691 c
24.509459 56.222073 24.435869 56.214825 24.362516 56.205166 c
24.289165 56.195511 24.216208 56.183464 24.143644 56.169029 c
24.071081 56.154598 23.999067 56.137806 23.927603 56.118656 c
23.85614 56.09951 23.785379 56.078045 23.715322 56.054264 c
23.645264 56.030479 23.576057 56.004433 23.507704 55.97612 c
23.439352 55.947807 23.371998 55.91729 23.305643 55.884571 c
23.239288 55.851845 23.174074 55.81699 23.110001 55.779999 c
h
f
Q
q
[41.154476 0 0 41.152344 2417.6462 2371.0759] cm
/DeviceRGB {} CS
[0.9647 0.9647 0.9647] SC
/DeviceRGB {} cs
[0.9647 0.9647 0.9647] sc
49.918999 64.349998 m
49.771999 64.349998 49.625 64.319 49.483997 64.261002 c
27.857 55 l
27.857 68.661003 l
27.857 68.661003 36.585999 78.834 50.109001 78.860001 c
50.109001 78.862 l
50.117001 78.862 50.125999 78.860001 50.134003 78.860001 c
50.139004 78.860001 50.147003 78.862 50.155003 78.862 c
50.155003 78.860001 l
63.678001 78.834 72.407005 68.661003 72.407005 68.661003 c
72.407005 55.039001 l
50.345005 64.264999 l
50.210999 64.320999 50.064999 64.349998 49.918999 64.349998 c
h
f
48.721001 46.977001 m
40.256001 45.972 30.014 44.911003 25.425001 50.427002 c
27.857 51.514004 l
27.857 51.517002 l
49.925003 60.965004 l
49.927002 60.963005 l
49.927002 60.965004 l
93 42.953999 l
50.193001 24.686001 l
7.268 42.695999 l
21.052999 48.597 l
20.223 49.671001 18.592999 53.001999 17.996 54.285999 c
16.993 54.454998 16.217001 55.285 16.217001 56.335999 c
16.217001 57.084 16.628 57.710999 17.214001 58.086998 c
17.145 58.086998 l
15.520001 68.466995 l
20.963001 68.466995 l
19.528002 58.086994 l
19.459002 58.086994 l
20.047001 57.710995 20.458002 57.083996 20.458002 56.335995 c
20.458002 55.879993 20.281002 55.481995 20.039001 55.135994 c
22.473001 49.949993 27.961002 44.597992 34.582001 43.376995 c
39.167 42.680996 44.219002 42.885994 48.728001 43.419994 c
49.334999 43.490993 50.207001 44.896996 50.135002 45.501995 c
50.062 46.106998 49.331001 47.058998 48.721001 46.977001 c
h
f
Q
q
[12.890281 0 0 12.889612 1797.8641 6167.957] cm
/DeviceRGB {} CS
[0.9647 0.9647 0.9647] SC
/DeviceRGB {} cs
[0.9647 0.9647 0.9647] sc
2.8571 35.714298 m
2.8571 11.428299 l
10.2857 11.428299 l
10.2857 33.714298 l
25.714699 33.714298 l
25.714699 40 l
7.1437 40 l
2.8571 35.714298 l
h
30 40 m
30 34.285698 l
32.285702 34.285698 l
32.285702 17.142698 l
30.000002 17.142698 l
30.000002 11.428398 l
42 11.428398 l
42 17.142698 l
39.714298 17.142698 l
39.714298 34.285698 l
42 34.285698 l
42 40 l
30 40 l
h
73.428146 15.714 m
73.428146 22.6854 l
70.399544 25.714001 l
73.428146 28.742601 l
73.428146 35.714001 l
69.142448 39.999702 l
47.713448 39.999702 l
47.713448 11.428703 l
69.142448 11.428703 l
73.428146 15.714 l
h
66.000145 22.570999 m
66.000145 17.7139 l
55.143143 17.7139 l
55.143143 22.570999 l
66.000145 22.570999 l
h
66.000145 33.714298 m
66.000145 28.857199 l
55.143143 28.857199 l
55.143143 33.714298 l
66.000145 33.714298 l
h
105.71386 15.714 m
105.71386 25.714001 l
101.428162 29.999701 l
105.71386 36.571102 l
105.71386 39.999702 l
98.856758 39.999702 l
92.913857 30.285402 l
87.428154 30.285402 l
87.428154 39.999702 l
79.999557 39.999702 l
79.999557 11.428703 l
101.428558 11.428703 l
105.71386 15.714 l
h
98.285858 24 m
98.285858 17.7143 l
87.428856 17.7143 l
87.428856 24 l
98.285858 24 l
h
112.285675 40 m
112.285675 15.714001 l
116.571373 11.428301 l
133.142365 11.428301 l
137.42807 15.714001 l
137.42807 40 l
129.999466 40 l
129.999466 32 l
119.713463 32 l
119.713463 40 l
112.284866 40 l
112.285675 40 l
h
119.714569 25.714001 m
130.000565 25.714001 l
130.000565 17.714001 l
119.714561 17.714001 l
119.714561 25.714001 l
119.714569 25.714001 l
h
169.71385 15.714 m
169.71385 25.714001 l
165.428146 29.999701 l
169.71385 36.571102 l
169.71385 39.999702 l
162.85675 39.999702 l
156.913849 30.285402 l
151.428146 30.285402 l
151.428146 39.999702 l
143.999542 39.999702 l
143.999542 11.428703 l
165.428543 11.428703 l
169.71385 15.714 l
h
162.285858 24 m
162.285858 17.7143 l
151.428864 17.7143 l
151.428864 24 l
162.285858 24 l
h
201.71457 11.429 m
201.71457 14.8576 l
192.00027 30.5716 l
192.00027 40.000198 l
184.57167 40.000198 l
184.57167 30.5145 l
174.85738 14.8575 l
174.85738 11.4289 l
181.42877 11.4289 l
188.28587 23.085899 l
195.14297 11.4289 l
201.71437 11.4289 l
201.71457 11.429 l
h
223.429 17.714001 m
214.2861 17.714001 l
214.2861 33.714001 l
223.429 33.714001 l
225.71471 31.428301 l
231.14331 31.428301 l
231.14331 35.714001 l
226.8576 39.999702 l
211.1436 39.999702 l
206.85789 35.714005 l
206.85789 15.714005 l
211.1436 11.428305 l
226.8576 11.428305 l
231.14331 15.714005 l
231.14331 19.999704 l
225.71471 19.999704 l
223.429 17.714001 l
h
237.71425 40 m
237.71425 15.714001 l
241.99995 11.428301 l
258.57095 11.428301 l
262.85666 15.714001 l
262.85666 40 l
255.42805 40 l
255.42805 32 l
245.14206 32 l
245.14206 40 l
237.71346 40 l
237.71425 40 l
h
245.14314 25.714001 m
255.42914 25.714001 l
255.42914 17.714001 l
245.14314 17.714001 l
245.14314 25.714001 l
h
267.42856 17.714001 m
267.42856 11.428301 l
291.71457 11.428301 l
291.71457 17.714001 l
283.25748 17.714001 l
283.25748 40 l
275.82889 40 l
275.82889 17.714001 l
267.42889 17.714001 l
267.42856 17.714001 l
h
296.28568 40 m
296.28568 15.714001 l
300.57138 11.428301 l
317.1424 11.428301 l
321.4281 15.714001 l
321.4281 40 l
313.99951 40 l
313.99951 32 l
303.7135 32 l
303.7135 40 l
296.28491 40 l
296.28568 40 l
h
303.71457 25.714001 m
314.00058 25.714001 l
314.00058 17.714001 l
303.71457 17.714001 l
303.71457 25.714001 l
h
327.99997 35.714298 m
327.99997 11.428299 l
335.42856 11.428299 l
335.42856 33.714298 l
350.85754 33.714298 l
350.85754 40 l
332.28656 40 l
327.99997 35.714298 l
h
376.85684 11.429 m
381.14255 15.7147 l
381.14255 35.714699 l
376.85684 40.000397 l
360.28583 40.000397 l
356.00012 35.714699 l
356.00012 15.714699 l
360.28583 11.428999 l
376.85681 11.428999 l
376.85684 11.429 l
h
373.71387 33.714298 m
373.71387 17.714298 l
363.42786 17.714298 l
363.42786 33.714298 l
373.71387 33.714298 l
h
405.71414 17.714001 m
395.14313 17.714001 l
395.14313 33.714001 l
406.00012 33.714001 l
406.00012 28.856901 l
399.42871 28.856901 l
399.42871 22.571201 l
413.42871 22.571201 l
413.42871 35.714203 l
409.14301 39.999901 l
392 39.999901 l
387.71429 35.714203 l
387.71429 15.714203 l
392 11.428503 l
409.14301 11.428503 l
413.42871 15.714203 l
413.42871 19.999903 l
408.00012 19.999903 l
405.71414 17.714001 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
